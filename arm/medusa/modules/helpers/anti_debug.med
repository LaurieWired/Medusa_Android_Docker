{
    "Name": "helpers/anti_debug",
    "Description": "Bypass root, debug detection",
    "Help": "https://codeshare.frida.re/@dzonerzy/fridantiroot/\n- Overwrite: isDebuggerConnected",
    "Code": "    
    console.log('\\n---------LOADING ANTI ROOT DETECTION SCRIPT-------------------');
    
    var antidebug = Java.use('android.os.Debug');

    var a_activity = Java.use('android.app.Activity');

    a_activity.isTaskRoot.implementation=function(){
        console.log('[!] overwriting isTaskRoot');
        return true;
    }



var hook = Java.use('android.provider.Settings$Secure');

var overloadCount1 = hook['getInt'].overloads.length;

for (var i = 0; i < overloadCount1; i++) {
    hook['getInt'].overloads[i].implementation = function() {
        colorLog('*** entered ' +'android.provider.Settings$Secure.getInt',{ c: Color.Green });
         //console.log('[i] Setting fetched:' + arguments[1]);
        var retval = this['getInt'].apply(this, arguments);
        var param = arguments[1];
        if(param==='development_settings_enabled' || param == 'adb_enabled')
        {
            colorLog('[!] AntiDebug technique detected:'+param,{c: Color.Red});
            return 0;

        }
            
        return retval;
        }
    }

    

antidebug.isDebuggerConnected.implementation = function(){
    console.log('[!] overwriting is debugger connected  ');
    return false;
}


    var RootPackages = [\"com.noshufou.android.su\", \"com.noshufou.android.su.elite\", \"eu.chainfire.supersu\",
        \"com.koushikdutta.superuser\", \"com.thirdparty.superuser\", \"com.yellowes.su\", \"com.koushikdutta.rommanager\",
        \"com.koushikdutta.rommanager.license\", \"com.dimonvideo.luckypatcher\", \"com.chelpus.lackypatch\",
        \"com.ramdroid.appquarantine\", \"com.ramdroid.appquarantinepro\", \"com.devadvance.rootcloak\", \"com.devadvance.rootcloakplus\",
        \"de.robv.android.xposed.installer\", \"com.saurik.substrate\", \"com.zachspong.temprootremovejb\", \"com.amphoras.hidemyroot\",
        \"com.amphoras.hidemyrootadfree\", \"com.formyhm.hiderootPremium\", \"com.formyhm.hideroot\", \"me.phh.superuser\",
        \"eu.chainfire.supersu.pro\", \"com.kingouser.com\",\"com.android.vending.billing.InAppBillingService.COIN\",
        \"com.android.vending.billing.InAppBillingService.LUCK\",\"com.chelpus.luckypatcher\",\"com.blackmartalpha\",
        \"org.blackmart.market\",\"com.allinone.free\",\"com.repodroid.app\", \"org.creeplays.hack\", \"com.baseappfull.fwd\", 
        \"com.zmapp\", \"com.dv.marketmod.installer\", \"org.mobilism.android\", \"com.android.wp.net.log\", 
        \"com.android.camera.update\", \"cc.madkite.freedom\", \"com.solohsu.android.edxp.manager\", 
        \"org.meowcat.edxposed.manager\", \"com.xmodgame\", \"com.cih.game_cih\",\"com.kingroot.kinguser\", 
        \"com.charles.lpoqasert\", \"catch_.me_.if_.you_.can_\",\"com.topjohnwu.magisk\",\"com.kingo.root\",
        \"com.smedialink.oneclickroot\", \"com.zhiqupk.root.global\", \"com.alephzain.framaroot\"];
    

    var RootBinaries = [\"su\", \"busybox\", \"supersu\", \"Superuser.apk\", \"KingoUser.apk\", \"SuperSu.apk\"];

    var RootProperties = {
        \"ro.build.selinux\": \"1\",
        \"ro.debuggable\": \"0\",
        \"service.adb.root\": \"0\",
        \"ro.secure\": \"1\"
    };

    var RootPropertiesKeys = [];

    for (var k in RootProperties) RootPropertiesKeys.push(k);

    var PackageManager = Java.use(\"android.app.ApplicationPackageManager\");

    var Runtime = Java.use('java.lang.Runtime');

    var NativeFile = Java.use('java.io.File');

    var String = Java.use('java.lang.String');

    var SystemProperties = Java.use('android.os.SystemProperties');

    var BufferedReader = Java.use('java.io.BufferedReader');

    var ProcessBuilder = Java.use('java.lang.ProcessBuilder');

    var StringBuffer = Java.use('java.lang.StringBuffer');

    var loaded_classes = Java.enumerateLoadedClassesSync();

    console.log(\"Loaded \" + loaded_classes.length + \" classes!\");

    var useKeyInfo = false;

    var useProcessManager = false;

    console.log(\"loaded: \" + loaded_classes.indexOf('java.lang.ProcessManager'));

    if (loaded_classes.indexOf('java.lang.ProcessManager') != -1) {
        try {
            //useProcessManager = true;
            //var ProcessManager = Java.use('java.lang.ProcessManager');
        } catch (err) {
            console.log(\"ProcessManager Hook failed: \" + err);
        }
    } else {
        console.log(\"ProcessManager hook not loaded\");
    }

    var KeyInfo = null;

    if (loaded_classes.indexOf('android.security.keystore.KeyInfo') != -1) {
        try {
            //useKeyInfo = true;
            //var KeyInfo = Java.use('android.security.keystore.KeyInfo');
        } catch (err) {
            console.log(\"KeyInfo Hook failed: \" + err);
        }
    } else {
        console.log(\"KeyInfo hook not loaded\");
    }


    PackageManager.getPackageInfo.overloads[0].implementation = function(pname, flags) {
        var shouldFakePackage = (RootPackages.indexOf(pname) > -1);
        if (shouldFakePackage) {
            console.log(\"Bypass root check for package (0): \" + pname);
            pname = \"set.package.name.to.a.fake.one.so.we.can.bypass.it\";
        }
        return this.getPackageInfo.call(this, pname, flags);
    };



    PackageManager.getPackageInfo.overloads[1].implementation = function(sname, flags) {
        var shouldFakePackage = (RootPackages.indexOf(sname) > -1);
        if (shouldFakePackage) {
            console.log(\"Bypass root check for package (1): \" + sname);
            pname = \"set.package.name.to.a.fake.one.so.we.can.bypass.it\";
        }
    
        return this.getPackageInfo.call(this, sname, flags);
    };

    NativeFile.exists.implementation = function() {
        var name = NativeFile.getName.call(this);
        var shouldFakeReturn = (RootBinaries.indexOf(name) > -1);
        if (shouldFakeReturn) {
            console.log(\"Bypass return value for binary: \" + name);
            return false;
        } else {
            return this.exists.call(this);
        }
    };

    var exec = Runtime.exec.overload('[Ljava.lang.String;');
    var exec1 = Runtime.exec.overload('java.lang.String');
    var exec2 = Runtime.exec.overload('java.lang.String', '[Ljava.lang.String;');
    var exec3 = Runtime.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;');
    var exec4 = Runtime.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.io.File');
    var exec5 = Runtime.exec.overload('java.lang.String', '[Ljava.lang.String;', 'java.io.File');

    exec5.implementation = function(cmd, env, dir) {
        if (cmd.indexOf(\"getprop\") != -1 || cmd == \"mount\" || cmd.indexOf(\"build.prop\") != -1 || cmd == \"id\" || cmd == \"sh\") {
            var fakeCmd = \"grep\";
            console.log(\"Bypass \" + cmd + \" command\");
            return exec1.call(this, fakeCmd);
        }
        if (cmd == \"su\") {
            var fakeCmd = \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\";
            console.log(\"Bypass \" + cmd + \" command\");
            return exec1.call(this, fakeCmd);
        }
        return exec5.call(this, cmd, env, dir);
    };

    exec4.implementation = function(cmdarr, env, file) {
        for (var i = 0; i < cmdarr.length; i = i + 1) {
            var tmp_cmd = cmdarr[i];
            if (tmp_cmd.indexOf(\"getprop\") != -1 || tmp_cmd == \"mount\" || tmp_cmd.indexOf(\"build.prop\") != -1 || tmp_cmd == \"id\" || tmp_cmd == \"sh\") {
                var fakeCmd = \"grep\";
                console.log(\"Bypass \" + cmdarr + \" command\");
                return exec1.call(this, fakeCmd);
            }

            if (tmp_cmd == \"su\") {
                var fakeCmd = \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\";
                console.log(\"Bypass \" + cmdarr + \" command\");
                return exec1.call(this, fakeCmd);
            }
        }
        return exec4.call(this, cmdarr, env, file);
    };

    exec3.implementation = function(cmdarr, envp) {
        for (var i = 0; i < cmdarr.length; i = i + 1) {
            var tmp_cmd = cmdarr[i];
            if (tmp_cmd.indexOf(\"getprop\") != -1 || tmp_cmd == \"mount\" || tmp_cmd.indexOf(\"build.prop\") != -1 || tmp_cmd == \"id\" || tmp_cmd == \"sh\") {
                var fakeCmd = \"grep\";
                console.log(\"Bypass \" + cmdarr + \" command\");
                return exec1.call(this, fakeCmd);
            }

            if (tmp_cmd == \"su\") {
                var fakeCmd = \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\";
                console.log(\"Bypass \" + cmdarr + \" command\");
                return exec1.call(this, fakeCmd);
            }
        }
        return exec3.call(this, cmdarr, envp);
    };

    exec2.implementation = function(cmd, env) {
        if (cmd.indexOf(\"getprop\") != -1 || cmd == \"mount\" || cmd.indexOf(\"build.prop\") != -1 || cmd == \"id\" || cmd == \"sh\") {
            var fakeCmd = \"grep\";
            console.log(\"Bypass \" + cmd + \" command\");
            return exec1.call(this, fakeCmd);
        }
        if (cmd == \"su\") {
            var fakeCmd = \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\";
            console.log(\"Bypass \" + cmd + \" command\");
            return exec1.call(this, fakeCmd);
        }
        return exec2.call(this, cmd, env);
    };

    exec.implementation = function(cmd) {
        for (var i = 0; i < cmd.length; i = i + 1) {
            var tmp_cmd = cmd[i];
            if (tmp_cmd.indexOf(\"getprop\") != -1 || tmp_cmd == \"mount\" || tmp_cmd.indexOf(\"build.prop\") != -1 || tmp_cmd == \"id\" || tmp_cmd == \"sh\") {
                var fakeCmd = \"grep\";
                console.log(\"Bypass \" + cmd + \" command\");
                return exec1.call(this, fakeCmd);
            }

            if (tmp_cmd == \"su\") {
                var fakeCmd = \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\";
                console.log(\"Bypass \" + cmd + \" command\");
                return exec1.call(this, fakeCmd);
            }
        }

        return exec.call(this, cmd);
    };

    exec1.implementation = function(cmd) {
        if (cmd.indexOf(\"getprop\") != -1 || cmd == \"mount\" || cmd.indexOf(\"build.prop\") != -1 || cmd == \"id\" || cmd == \"sh\") {
            var fakeCmd = \"grep\";
            console.log(\"Bypass \" + cmd + \" command\");
            return exec1.call(this, fakeCmd);
        }
        if (cmd == \"su\") {
            var fakeCmd = \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\";
            console.log(\"Bypass \" + cmd + \" command\");
            return exec1.call(this, fakeCmd);
        }
        return exec1.call(this, cmd);
    };

    String.contains.implementation = function(name) {
        if (name == \"test-keys\") {
            console.log(\"Bypass test-keys check\");
            return false;
        }
        return this.contains.call(this, name);
    };

    var get = SystemProperties.get.overload('java.lang.String');

    get.implementation = function(name) {
        if (RootPropertiesKeys.indexOf(name) != -1) {
            console.log(\"Bypass \" + name);
            return RootProperties[name];
        }
        return this.get.call(this, name);
    };

    Interceptor.attach(Module.findExportByName(\"libc.so\", \"fopen\"), {
        onEnter: function(args) {
            var path = Memory.readCString(args[0]);
            path = path.split(\"/\");
            var executable = path[path.length - 1];
            var shouldFakeReturn = (RootBinaries.indexOf(executable) > -1)
            if (shouldFakeReturn) {
                Memory.writeUtf8String(args[0], \"/notexists\");
                console.log(\"Bypass native fopen\");
            }
        },
        onLeave: function(retval) {

        }
    });

    Interceptor.attach(Module.findExportByName(\"libc.so\", \"system\"), {
        onEnter: function(args) {
            var cmd = Memory.readCString(args[0]);
            console.log(\"SYSTEM CMD: \" + cmd);
            if (cmd.indexOf(\"getprop\") != -1 || cmd == \"mount\" || cmd.indexOf(\"build.prop\") != -1 || cmd == \"id\") {
                console.log(\"Bypass native system: \" + cmd);
                Memory.writeUtf8String(args[0], \"grep\");
            }
            if (cmd == \"su\") {
                console.log(\"Bypass native system: \" + cmd);
                Memory.writeUtf8String(args[0], \"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\");
            }
        },
        onLeave: function(retval) {

        }
    });

    /*

    TO IMPLEMENT:

    Exec Family

    int execl(const char *path, const char *arg0, ..., const char *argn, (char *)0);
    int execle(const char *path, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);
    int execlp(const char *file, const char *arg0, ..., const char *argn, (char *)0);
    int execlpe(const char *file, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);
    int execv(const char *path, char *const argv[]);
    int execve(const char *path, char *const argv[], char *const envp[]);
    int execvp(const char *file, char *const argv[]);
    int execvpe(const char *file, char *const argv[], char *const envp[]);

    */


    BufferedReader.readLine.overloads[0].implementation = function() {
        var text = this.readLine.call(this);
        if (text === null) {
            // just pass , i know it's ugly as hell but test != null won't work :(
        } else {
            var shouldFakeRead = (text.indexOf(\"ro.build.tags=test-keys\") > -1);
            if (shouldFakeRead) {
                console.log(\"Bypass build.prop file read\");
                text = text.replace(\"ro.build.tags=test-keys\", \"ro.build.tags=release-keys\");
            }
        }
        return text;
    };


    BufferedReader.readLine.overloads[1].implementation = function(boolean_) {
        var text = this.readLine(boolean_);
        if (text === null) {
            // just pass , i know it's ugly as hell but test != null won't work :(
        } else {
            var shouldFakeRead = (text.indexOf(\"ro.build.tags=test-keys\") > -1);
            if (shouldFakeRead) {
                console.log(\"Bypass build.prop file read\");
                text = text.replace(\"ro.build.tags=test-keys\", \"ro.build.tags=release-keys\");
            }
        }
        return text;
    };

    var executeCommand = ProcessBuilder.command.overload('java.util.List');

    ProcessBuilder.start.implementation = function() {
        var cmd = this.command.call(this);
        var shouldModifyCommand = false;
        for (var i = 0; i < cmd.size(); i = i + 1) {
            var tmp_cmd = cmd.get(i).toString();
            if (tmp_cmd.indexOf(\"getprop\") != -1 || tmp_cmd.indexOf(\"mount\") != -1 || tmp_cmd.indexOf(\"build.prop\") != -1 || tmp_cmd.indexOf(\"id\") != -1) {
                shouldModifyCommand = true;
            }
        }
        if (shouldModifyCommand) {
            console.log(\"Bypass ProcessBuilder \" + cmd);
            this.command.call(this, [\"grep\"]);
            return this.start.call(this);
        }
        if (cmd.indexOf(\"su\") != -1) {
            console.log(\"Bypass ProcessBuilder \" + cmd);
            this.command.call(this, [\"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\"]);
            return this.start.call(this);
        }

        return this.start.call(this);
    };

    if (useProcessManager) {
        var ProcManExec = ProcessManager.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.io.File', 'boolean');
        var ProcManExecVariant = ProcessManager.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.lang.String', 'java.io.FileDescriptor', 'java.io.FileDescriptor', 'java.io.FileDescriptor', 'boolean');

        ProcManExec.implementation = function(cmd, env, workdir, redirectstderr) {
            var fake_cmd = cmd;
            for (var i = 0; i < cmd.length; i = i + 1) {
                var tmp_cmd = cmd[i];
                if (tmp_cmd.indexOf(\"getprop\") != -1 || tmp_cmd == \"mount\" || tmp_cmd.indexOf(\"build.prop\") != -1 || tmp_cmd == \"id\") {
                    var fake_cmd = [\"grep\"];
                    console.log(\"Bypass \" + cmdarr + \" command\");
                }

                if (tmp_cmd == \"su\") {
                    var fake_cmd = [\"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\"];
                    console.log(\"Bypass \" + cmdarr + \" command\");
                }
            }
            return ProcManExec.call(this, fake_cmd, env, workdir, redirectstderr);
        };

        ProcManExecVariant.implementation = function(cmd, env, directory, stdin, stdout, stderr, redirect) {
            var fake_cmd = cmd;
            for (var i = 0; i < cmd.length; i = i + 1) {
                var tmp_cmd = cmd[i];
                if (tmp_cmd.indexOf(\"getprop\") != -1 || tmp_cmd == \"mount\" || tmp_cmd.indexOf(\"build.prop\") != -1 || tmp_cmd == \"id\") {
                    var fake_cmd = [\"grep\"];
                    console.log(\"Bypass \" + cmdarr + \" command\");
                }

                if (tmp_cmd == \"su\") {
                    var fake_cmd = [\"justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled\"];
                    console.log(\"Bypass \" + cmdarr + \" command\");
                }
            }
            return ProcManExecVariant.call(this, fake_cmd, env, directory, stdin, stdout, stderr, redirect);
        };
    }

    if (useKeyInfo) {
        KeyInfo.isInsideSecureHardware.implementation = function() {
            console.log(\"Bypass isInsideSecureHardware\");
            return true;
        }
    }
"
}
