{
    "Name": "code_loading/native_libs",
    "Description": "Detect loading of native libraries",
    "Help": "Hooks the following functions:\n- System.loadLibrary\n- System.load\n- System.mapLibraryName",
    "Code": "
console.log('\\n--------Native load hook module by @ch0pin--------------\\n');

var systemA = Java.use('java.lang.System');
    const System = Java.use('java.lang.System');
    const Runtime_1 = Java.use('java.lang.Runtime');
    const SystemLoad_2 = System.loadLibrary.overload('java.lang.String');
    const VMStack = Java.use('dalvik.system.VMStack');

    SystemLoad_2.implementation = function(library) {
        colorLog('[+] Application is loading the following library:' + library,{c: Color.Red});
        try {
            const loaded = Runtime_1.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), library);
            return loaded;
        } catch(ex) {
            console.log(ex);
        }
    };

systemA.load.implementation = function(filename){
    colorLog('[+] Application is loading the following library: '+filename, {c: Color.Red});
    return this.load(filename);
}
//systemA.loadLibrary.implementation = function(libname){
//    colorLog('[+] Application is loading the following library:'+libname,{c: Color.Red});
//    return this.loadLibrary(libname);
//}

systemA.mapLibraryName.implementation = function(libname){
    var ret = this.mapLibraryName(libname);
    colorLog('[+] Application maps '+libname+ ' to ' + ret , {c: Color.Red});
    return ret;
}

Interceptor.attach(Module.findExportByName(null, 'android_dlopen_ext'),{
    onEnter: function(args){
        // first arg is the path to the library loaded
        var library_path = Memory.readCString(args[0])


            console.log(\"[...] Loading library : \" + library_path)
            library_loaded = 1
        
    },
    onLeave: function(args){

        // if it's the library we want to hook, hooking it
        if(library_loaded ==  1){
            console.log(\"[+] Loaded\")
            library_loaded = 0
        }
    }
})



/*
static void	load(String filename)
Loads the native library specified by the filename argument.

static void	loadLibrary(String libname)
Loads the native library specified by the libname argument.

static String	mapLibraryName(String libname)
Maps a library name into a platform-specific string representing a native library.

*/
"
}
